AWSTemplateFormatVersion: "2010-09-09"
Description: "NestJS API con VPC, ALB, EC2 Auto Scaling Group y ACM"

Parameters:
    KeyName:
        Description: Nombre del key pair EC2 existente en us-east-1
        Type: AWS::EC2::KeyPair::KeyName

    DomainName:
        Type: String
        Description: Dominio para el certificado ACM
        Default: usmp.identity.pe

Resources:
    # VPC
    VPC:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: 10.0.0.0/16
            EnableDnsHostnames: true
            EnableDnsSupport: true
            Tags:
                - Key: Name
                  Value: !Sub "${AWS::StackName}-VPC"

    # Internet Gateway
    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - Key: Name
                  Value: !Sub "${AWS::StackName}-IGW"

    VPCGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            VpcId: !Ref VPC
            InternetGatewayId: !Ref InternetGateway

    # Subnets
    PublicSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            CidrBlock: 10.0.1.0/24
            AvailabilityZone: !Select [0, !GetAZs ""]
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: !Sub "${AWS::StackName}-PublicSubnet-1"

    PublicSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            CidrBlock: 10.0.2.0/24
            AvailabilityZone: !Select [1, !GetAZs ""]
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: !Sub "${AWS::StackName}-PublicSubnet-2"

    # Route Table
    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub "${AWS::StackName}-PublicRT"

    PublicRoute:
        Type: AWS::EC2::Route
        DependsOn: VPCGatewayAttachment
        Properties:
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway

    PublicSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref PublicSubnet1
            RouteTableId: !Ref PublicRouteTable

    PublicSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref PublicSubnet2
            RouteTableId: !Ref PublicRouteTable

    # Security Group para el ALB
    ALBSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Security Group para ALB
            VpcId: !Ref VPC
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
                - IpProtocol: tcp
                  FromPort: 443
                  ToPort: 443
                  CidrIp: 0.0.0.0/0
            Tags:
                - Key: Name
                  Value: !Sub "${AWS::StackName}-ALB-SG"

    # Security Group para las instancias EC2
    EC2SecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Security Group para instancias NestJS
            VpcId: !Ref VPC
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 3000
                  ToPort: 3000
                  SourceSecurityGroupId: !Ref ALBSecurityGroup
                - IpProtocol: tcp
                  FromPort: 22
                  ToPort: 22
                  CidrIp: 0.0.0.0/0
            Tags:
                - Key: Name
                  Value: !Sub "${AWS::StackName}-EC2-SG"

    # IAM Role para las instancias EC2
    EC2InstanceRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service: ec2.amazonaws.com
                      Action: sts:AssumeRole
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

    # IAM Instance Profile
    EC2InstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
            Roles:
                - !Ref EC2InstanceRole

    # Launch Template para las instancias - USANDO AMAZON LINUX 2023
    NestJSLaunchTemplate:
        Type: AWS::EC2::LaunchTemplate
        Properties:
            # LaunchTemplateName: !Sub "${AWS::StackName}-LaunchTemplate"  # ELIMINADO
            LaunchTemplateData:
                ImageId: ami-0b5eea76982371e91 # Amazon Linux 2
                InstanceType: t3.micro
                KeyName: !Ref KeyName
                IamInstanceProfile:
                    Arn: !GetAtt EC2InstanceProfile.Arn
                SecurityGroupIds:
                    - !Ref EC2SecurityGroup

    # Auto Scaling Group
    NestJSAutoScalingGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier:
                - !Ref PublicSubnet1
                - !Ref PublicSubnet2
            LaunchTemplate:
                LaunchTemplateId: !Ref NestJSLaunchTemplate
                Version: !GetAtt NestJSLaunchTemplate.LatestVersionNumber
            MinSize: 2
            MaxSize: 4
            DesiredCapacity: 2
            HealthCheckType: ELB
            HealthCheckGracePeriod: 300
            TargetGroupARNs:
                - !Ref NestJSTargetGroup
            Tags:
                - Key: Name
                  Value: !Sub "${AWS::StackName}-Instance"
                  PropagateAtLaunch: true

    # Target Group para el ALB
    NestJSTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            Name: !Sub "${AWS::StackName}-TG"
            Port: 3000
            Protocol: HTTP
            VpcId: !Ref VPC
            HealthCheckEnabled: true
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 10
            HealthyThresholdCount: 2
            UnhealthyThresholdCount: 3
            Matcher:
                HttpCode: "200-499"
            TargetType: instance

    # Application Load Balancer
    NestJSALB:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            Name: !Sub "${AWS::StackName}-ALB"
            Scheme: internet-facing
            SecurityGroups:
                - !Ref ALBSecurityGroup
            Subnets:
                - !Ref PublicSubnet1
                - !Ref PublicSubnet2
            Type: application
            Tags:
                - Key: Name
                  Value: !Sub "${AWS::StackName}-ALB"

    # Certificado ACM
    SSLCertificate:
        Type: AWS::CertificateManager::Certificate
        Properties:
            DomainName: !Ref DomainName
            SubjectAlternativeNames:
                - !Sub "*.${DomainName}"
            ValidationMethod: DNS
            Tags:
                - Key: Name
                  Value: !Sub "${AWS::StackName}-Certificate"

    # Listener HTTP (redirige a HTTPS)
    HTTPListener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            LoadBalancerArn: !Ref NestJSALB
            Port: 80
            Protocol: HTTP
            DefaultActions:
                - Type: redirect
                  RedirectConfig:
                      Protocol: HTTPS
                      Port: 443
                      StatusCode: HTTP_301

    # Listener HTTPS
    HTTPSListener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            LoadBalancerArn: !Ref NestJSALB
            Port: 443
            Protocol: HTTPS
            Certificates:
                - CertificateArn: !Ref SSLCertificate
            DefaultActions:
                - Type: forward
                  TargetGroupArn: !Ref NestJSTargetGroup

Outputs:
    VPCId:
        Description: ID de la VPC creada
        Value: !Ref VPC

    ALBDNSName:
        Description: DNS Name del Application Load Balancer
        Value: !GetAtt NestJSALB.DNSName

    ALBURL:
        Description: URL del ALB
        Value: !Sub "https://${NestJSALB.DNSName}"

    ALBHTTPURL:
        Description: URL HTTP del ALB (redirige a HTTPS)
        Value: !Sub "http://${NestJSALB.DNSName}"

    CertificateARN:
        Description: ARN del certificado ACM
        Value: !Ref SSLCertificate

    PublicSubnet1Id:
        Description: ID de la Public Subnet 1
        Value: !Ref PublicSubnet1

    PublicSubnet2Id:
        Description: ID de la Public Subnet 2
        Value: !Ref PublicSubnet2
